module FoldFunctions where

import Data.List

-- Правая свёртка ---------------------------------------------------------
foldr' :: (a -> b -> b) -> b -> [a] -> b
foldr' f acc []      = acc
foldr' f acc (x:xs)  = x `f` foldr' f acc xs

-- Правая свёртка по сути реализует часто повторяющуюся схему рекурсии
-- при операциях над списками, например, рассмотрим рекурсивные реализации
-- для суммы списков и конкатенации списков, а затем реализуем их с foldr

sumList :: Num a => [a] -> a
sumList []      = 0
sumList (x:xs)  = x + sumList xs

sumList' :: Num a => [a] -> a
sumList' = foldr' (+) 0

concatList :: [[a]] -> [a]
concatList []        = []
concatList (xs:yss)  = xs ++ concatList yss

concatList' :: [[a]] -> [a]
concatList' = foldr' (++) []

{-
Можно проиллюстрировать последовательность редукций при правой свёртке
на следующем примере. Следует учесть, что показанная ниже последовательность
рекупсивных вызовов не совсем корректна, так как головным редексом
является `f` в котором также могут быть вычисления. Но будем считать, что
функция f неопределена:

foldr f acc 1:2:3:[]
>> 1 `f` (foldr f acc 2:3:[])
>> 1 `f` (2 `f` (foldr f acc 3:[]))
>> 1 `f` (2 `f` (3 `f` (foldr f acc [])))
>> 1 `f` (2 `f` (3 `f` acc))

То есть список как бы "пересобирается" справа, начиная со значения acc,
но вместо конструктора (:) подставляется функция f
-}
-- ------------------------------------------------------------------------

